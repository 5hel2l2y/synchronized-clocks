{"version":3,"sources":["components/Form.js","components/Analog.js","components/Digital.js","App.js","serviceWorker.js","index.js"],"names":["Form","handleChange","e","setState","target","id","value","state","hourInput","minuteInput","secondInput","onSubmit","props","handleTimeChange","htmlFor","type","min","max","onChange","this","Component","Analog","secondsStyle","transform","second","minutesStyle","minute","hoursStyle","hour","className","style","Digital","time","App","tick","set","event","Date","setHours","live","getTime","getHours","getMinutes","getSeconds","newTime","preventDefault","intervalID","setInterval","clearInterval","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16ed795a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../app.scss';\n\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      hourInput: '',\n      minuteInput: '',\n      secondInput: ''\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={e => this.props.handleTimeChange(e, this.state)}>\n        <div>\n          <label htmlFor=\"hourInput\">Hour</label>:\n          <label htmlFor=\"minuteInput\">Minute</label>:\n          <label htmlFor=\"secondInput\">Second</label>\n          <input type=\"number\" id=\"hourInput\" min=\"0\" max=\"23\" onChange={this.handleChange} />:<input type=\"number\" id=\"minuteInput\" min=\"0\" max=\"59\" onChange={this.handleChange} />:<input type=\"number\" id=\"secondInput\" min=\"0\" max=\"59\" onChange={this.handleChange} />\n        </div>\n        <button>Change Time</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;","import React from 'react';\nimport '../app.scss';\n\nimport Form from './Form';\n\nconst Analog = props => {\n  const secondsStyle = {\n    transform: `rotate(${props.second * 6}deg)`\n  };\n  const minutesStyle = {\n    transform: `rotate(${props.minute * 6}deg)`\n  };\n  const hoursStyle = {\n    transform: `rotate(${props.hour * 30}deg)`\n  };\n\n  return (\n    <section className=\"clock\">\n      <h2>Analog</h2>\n      <div className=\"analog\">\n        <div className={\"dial seconds\"} style={secondsStyle} />\n        <div className={\"dial minutes\"} style={minutesStyle} />\n        <div className={\"dial hours\"} style={hoursStyle} />\n      </div>\n\n      <Form handleTimeChange={props.handleTimeChange} />\n    </section>\n  );\n}\n\nexport default Analog;","import React from 'react';\nimport '../app.scss';\n\nimport Form from './Form';\n\nconst Digital = props => {\n  return (\n    <section className=\"clock\">\n      <h2>Digital</h2>\n      <div className=\"digital\">\n        <p>{props.hour}:{props.minute}:{props.second}</p>\n      </div>\n      <p>{props.time}</p>\n\n      <Form handleTimeChange={props.handleTimeChange} />\n    </section>\n  );\n}\n\nexport default Digital;","import React, { Component } from 'react';\nimport './app.scss';\n\nimport Analog from './components/Analog';\nimport Digital from './components/Digital';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      set: false,\n      hour: new Date().getHours(),\n      minute: new Date().getMinutes(),\n      second: new Date().getSeconds(),\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick = () => {\n    if(this.state.set) {\n      const event = new Date();\n      event.setHours(this.state.hour, this.state.minute, this.state.second);\n      \n      const live = new Date(event.getTime() + 1000);\n\n      this.setState({\n        hour: live.getHours(),\n        minute: live.getMinutes(),\n        second: live.getSeconds(),\n      });\n    } else {\n      this.setState({\n        hour: new Date().getHours(),\n        minute: new Date().getMinutes(),\n        second: new Date().getSeconds(),\n      });\n    }\n  }\n\n  handleTimeChange = (e, newTime) => {\n    e.preventDefault();\n    \n    this.setState({\n      set: true,\n      hour: newTime.hourInput,\n      minute: newTime.minuteInput,\n      second: newTime.secondInput\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <header>\n            <h1>Synchronized Clocks</h1>\n            <p>Try setting a time on the analog or digital clock.</p>\n          </header>\n\n          <Analog hour={this.state.hour} minute={this.state.minute} second={this.state.second}handleTimeChange={this.handleTimeChange} />\n          <Digital hour={this.state.hour} minute={this.state.minute} second={this.state.second} handleTimeChange={this.handleTimeChange}/>\n        </div>\n\n        <footer>\n          Â© <a href=\"http://https://5hel2l2y.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Sherry Yang</a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}